//#Использовать ".."
#Использовать fs
#Использовать logos
#Использовать v8metadata-reader

#Область ОписаниеПеременных

Перем Лог; // объект лога
Перем КаталогИсходников; // каталог исходников
Перем Поддержка; // объект поддержки

#КонецОбласти

#Область ПрограммныйИнтерфейс

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Процедура ОписаниеКоманды(Команда) Экспорт

	ПутьИсходников = Команда.Опция("s src", "", "Путь к исходникам в формате Конфигуратора или EDT")
    .ТСтрока()
    .ВОкружении(ПараметрыПриложения.Имя() + "src")
    .ПоУмолчанию("src");
    // .СкрытьВСправке(); // Любой тип

	ВыходнойФайл = Команда.Аргумент("FILE", "", "Путь выходного файла в формате json")
		.ТСтрока() // тип опции Строка
		.ВОкружении(ПараметрыПриложения.Имя() + "FILE")
		.ПоУмолчанию("");
		// .СкрытьВСправке(); // Любой тип

	// ПутьИсходников = Команда.Опция("v debug", Ложь, "Описание опции")
    // .Флаговый() // тип опции булево
    // .ВОкружении("ИМЯ_ПЕРЕМЕННОЙ")
    // .ПоУмолчанию(Ложь)
    // .СкрытьВСправке(); // Любой тип

КонецПроцедуры

Процедура ВыполнитьКоманду(Знач Команда) Экспорт

	Лог = Логирование.ПолучитьЛог(ПараметрыПриложения.ИмяЛога());
	// Лог.УстановитьУровень(УровниЛога.Отладка);

	КаталогИсходников = Команда.ЗначениеОпции("src");
	ФайлРезультат = Команда.ЗначениеАргумента("FILE");

	Лог.Отладка("КаталогИсходников %1", Команда.ЗначениеОпции("src"));
	Лог.Отладка("ФайлРезультат %1", Команда.ЗначениеАргумента("FILE"));

	Если Не ФС.КаталогСуществует(КаталогИсходников) Тогда
		ВызватьИсключение "Не существует каталог исходников " + КаталогИсходников;
	КонецЕсли;

	Поддержка = Новый Поддержка(КаталогИсходников);

	ПоказатьИнформациюОПоддержке();

	ФайлыИзменяемые = Поддержка.ВсеФайлы(1, "+");
	Лог.Отладка("Файлы изменяемые %1", ФайлыИзменяемые.Количество());

	Для Счетчик = 0 По Мин(15, ФайлыИзменяемые.Количество() - 1)  Цикл

		ОтносительныйПуть = ФС.ОтносительныйПуть(КаталогИсходников, ФайлыИзменяемые[Счетчик]);
		Лог.Отладка(ОтносительныйПуть);

	КонецЦикла;

	КореньДерева = ДеревоМетаданныхЧерезСтруктуры(ФайлыИзменяемые);

	ЗаписатьФайлJSON(КореньДерева, ФайлРезультат);

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ПоказатьИнформациюОПоддержке()

	ФайлыНаЗамке = Поддержка.ВсеФайлы(0);
	Лог.Отладка("Файлов на замке %1", ФайлыНаЗамке.Количество());

	ФайлыНаПоддержке = Поддержка.ВсеФайлы(1);
	Лог.Отладка("Файлы на поддержке %1", ФайлыНаПоддержке.Количество());

	ФайлыСнятоСПоддержки = Поддержка.ВсеФайлы(2);
	Лог.Отладка("Файлы снято с поддержки %1", ФайлыСнятоСПоддержки.Количество());

	ФайлыНетПоддержки = Поддержка.ВсеФайлы(3);
	Лог.Отладка("Файлы нет поддержки %1", ФайлыНетПоддержки.Количество());

	ФайлыПрочие = Поддержка.ВсеФайлы(4);
	Лог.Отладка("Файлы прочие %1", ФайлыПрочие.Количество());

	ФайлыИзменяемые = Поддержка.ВсеФайлы(1, "+");
	Лог.Отладка("Файлы изменяемые %1", ФайлыИзменяемые.Количество());

КонецПроцедуры

Функция ДеревоМетаданныхЧерезСтруктуры(Знач Файлы)

	Результат = Новый Структура;
	МетаданныеКаталоги = МетаданныеКаталоги();

	// ТекущийВидМетаданного = "";
	// ТекущееИмяМетаданного = "";
	ВременнаяКоллекция = Новый Структура;

	Для каждого ПутьФайла Из Файлы Цикл
		ОтносительныйПуть = ФС.ОтносительныйПуть(КаталогИсходников, ПутьФайла);
		Лог.Отладка("ОтносительныйПуть " + ОтносительныйПуть);
		Сегменты = СтрРазделить(ОтносительныйПуть, ПолучитьРазделительПути());

		ВидМетаданного = МетаданныеКаталоги.Получить(Сегменты[0]);
		Если ВидМетаданного = Неопределено Тогда
			// неизвестный тип
			Продолжить;
		КонецЕсли;
		// Если ТекущийВидМетаданного <> ВидМетаданного Тогда
		// 	ТекущийВидМетаданного = ВидМетаданного;
		// КонецЕсли;
		ИмяМетаданного = Сегменты[1];

		ДобавитьВложенныйЕслиЕщеНет(ВременнаяКоллекция, ВидМетаданного, ИмяМетаданного, Новый Структура);

	КонецЦикла;

	Для каждого КлючЗначение Из ВременнаяКоллекция Цикл

		Коллекция = Новый Массив;
		СкопироватьЭлементы(КлючЗначение.Значение, Коллекция);

		Результат.Вставить(КлючЗначение.Ключ, Коллекция);
	КонецЦикла;

	Возврат Результат;

КонецФункции

Функция ДобавитьВложенныйЕслиЕщеНет(Знач Коллекция, Знач ИмяРодителя, Знач Элемент, Знач НоваяКоллекцияПоУмолчанию)

	ВложеннаяКоллекция = Неопределено;
	Если Не Коллекция.Свойство(ИмяРодителя, ВложеннаяКоллекция) Или ВложеннаяКоллекция = Неопределено Тогда
		ВложеннаяКоллекция = НоваяКоллекцияПоУмолчанию;
		Коллекция.Вставить(ИмяРодителя, ВложеннаяКоллекция);
	КонецЕсли;

	ВложеннаяКоллекция.Вставить(Элемент);

	Возврат ВложеннаяКоллекция;

КонецФункции

Функция МетаданныеКаталоги()

	Результат = Новый Соответствие;
	Результат.Вставить("Catalogs", "Справочники");
	Результат.Вставить("Documents", "Документы");
	Результат.Вставить("AccountingRegisters", "РегистрыБухгалтерии");
	Результат.Вставить("AccumulationRegisters", "РегистрыНакопления");
	Результат.Вставить("InformationRegisters", "РегистрыСведений");
	Результат.Вставить("CalculationRegisters", "РегистрыРасчета");
	Результат.Вставить("BusinessProcesses", "БизнесПроцессы");
	Результат.Вставить("Tasks", "Задачи");
	Результат.Вставить("ChartsOfAccounts", "ПланыСчетов");
	Результат.Вставить("ChartsOfCalculationTypes", "ПланыВидовРасчета");
	Результат.Вставить("ChartsOfCharacteristicTypes", "ПланыВидовХарактеристик");
	Результат.Вставить("DataProcessors", "Обработки");
	Результат.Вставить("Reports", "Отчеты");
	Результат.Вставить("DocumentJournals", "ЖурналыДокументов");
	Результат.Вставить("ExchangePlans", "ПланыОбмена");
	Результат.Вставить("CommonCommands", "ОбщиеКоманды");
	Результат.Вставить("CommonForms", "ОбщиеФормы");
	Результат.Вставить("CommonModules", "ОбщиеМодули");
	Результат.Вставить("CommonTemplates", "ОбщиеМакеты");
	Результат.Вставить("Constants", "Константы");
	Результат.Вставить("ExternalDataSources", "ВнешниеИсточники");

	Результат.Вставить("FunctionalOptionsParameters", "ПараметрыФункциональныхОпций");

	// TODO добавить множественное число
	Результат.Вставить("CommandGroups", "ОбщаяГруппа");
	Результат.Вставить("CommonAttributes", "ОбщийРеквизит");
	Результат.Вставить("CommonPictures", "ОбщаяКартинка");
	Результат.Вставить("DefinedTypes", "ОпределяемыйТип");
	Результат.Вставить("DocumentNumerators", "Нумератор");
	Результат.Вставить("Enums", "Перечисление");
	Результат.Вставить("EventSubscriptions", "ПодпискаНаСобытие");
	Результат.Вставить("FilterCriteria", "КритерийОтбора");
	Результат.Вставить("FunctionalOptions", "ФункциональнаяОпция");
	Результат.Вставить("HTTPServices", "HTTPСервис");
	Результат.Вставить("Languages", "Язык");
	Результат.Вставить("Roles", "Роль");
	Результат.Вставить("ScheduledJobs", "РегламентноеЗадание");
	Результат.Вставить("Sequences", "Последовательность");
	Результат.Вставить("SessionParameters", "ПараметрСеанса");
	Результат.Вставить("SettingsStorages", "ХранилищеНастроек");
	Результат.Вставить("StyleItems", "ЭлементСтиля");
	Результат.Вставить("Subsystems", "Подсистема");
	Результат.Вставить("WebServices", "WebСервис");
	Результат.Вставить("XDTOPackages", "XDTOПакет");

	Возврат Новый ФиксированноеСоответствие(Результат);
КонецФункции

Процедура СкопироватьЭлементы(Знач Откуда, Знач Куда)

	Для каждого КлючЗначение Из Откуда Цикл
		Куда.Добавить(КлючЗначение.Ключ);
	КонецЦикла;

КонецПроцедуры

Процедура ЗаписатьФайлJSON(Знач Значение, Знач ФайлРезультат)

	ПараметрыЗаписи = Новый ПараметрыЗаписиJSON(, "  ");

	ЗаписьJSON = Новый ЗаписьJSON();
	ЗаписьJSON.ОткрытьФайл(ФайлРезультат, , , ПараметрыЗаписи);
	// ЗаписьJSON.УстановитьСтроку(ПараметрыЗаписи);

	ЗаписатьJSON(ЗаписьJSON, Значение);

	ЗаписьJSON.Закрыть();
	// Лог.Отладка(ЗаписьJSON.Закрыть());

КонецПроцедуры

#КонецОбласти
